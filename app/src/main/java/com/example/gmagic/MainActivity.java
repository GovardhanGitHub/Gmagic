package com.example.gmagic;import androidx.annotation.RequiresApi;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import android.Manifest;import android.content.Context;import android.content.DialogInterface;import android.content.SharedPreferences;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.content.Intent;import android.provider.Settings;import android.view.KeyEvent;import android.view.View;import android.view.inputmethod.EditorInfo;import android.view.inputmethod.InputMethodManager;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import com.google.firebase.auth.FirebaseAuth;import com.karumi.dexter.Dexter;import com.karumi.dexter.PermissionToken;import com.karumi.dexter.listener.PermissionDeniedResponse;import com.karumi.dexter.listener.PermissionGrantedResponse;import com.karumi.dexter.listener.PermissionRequest;import com.karumi.dexter.listener.single.PermissionListener;import java.io.IOException;import static com.example.gmagic.VerifyPhoneActivity.SHARED_KEY;public class MainActivity extends AppCompatActivity {    Button otpBtn;    public static final int RequestPermissionCode = 1;    private EditText editTextMobile, editTextName;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        requestContactPermission(savedInstanceState);    }    public void hideSoftKeyboard(View view){        InputMethodManager imm =(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);    }    private void requestContactPermission(final Bundle bundle) {        Dexter.withActivity(this)                .withPermission(Manifest.permission.READ_CONTACTS)                .withListener(new PermissionListener() {                    @Override                    public void onPermissionGranted(PermissionGrantedResponse response) {                        // permission is granted                        init();                    }                    @Override                    public void onPermissionDenied(PermissionDeniedResponse response) {                        // check for permanent denial of permission                        if (response.isPermanentlyDenied()) {                            showSettingsDialog();                        }                    }                    @Override                    public void onPermissionRationaleShouldBeShown(PermissionRequest permission, PermissionToken token) {                        token.continuePermissionRequest();                    }                }).check();    }    /**     * Showing Alert Dialog with Settings option     * Navigates user to app settings     * NOTE: Keep proper title and message depending on your app     */    private void openSettingsDialog() {        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);        builder.setTitle("Required Permissions");        builder.setMessage("This app require permission to use awesome feature. Grant them in app settings.");        builder.setPositiveButton("Take Me To SETTINGS", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.cancel();                Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);                Uri uri = Uri.fromParts("package", getPackageName(), null);                intent.setData(uri);                startActivityForResult(intent, 101);            }        });        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.cancel();            }        });        builder.show();    }    // navigating user to app settings    private void showSettingsDialog() {        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);        builder.setTitle("Need Permissions");        builder.setMessage("This app needs permission to use this feature. You can grant them in app settings.");        builder.setPositiveButton("GOTO SETTINGS", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.cancel();                openSettings();            }        });        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.cancel();            }        });        builder.show();    }    private void openSettings() {        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);        Uri uri = Uri.fromParts("package", getPackageName(), null);        intent.setData(uri);        startActivityForResult(intent, 101);    }    private void init() {        if (FirebaseAuth.getInstance().getCurrentUser() != null) {            Intent intent = new Intent(MainActivity.this, Main3Activity.class);            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);            startActivity(intent);            finish();        }        setContentView(R.layout.activity_main);        editTextMobile = findViewById(R.id.editTextMobile);        editTextName = findViewById(R.id.edName);        otpBtn =  findViewById(R.id.buttonContinue);       otpBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String mobile = editTextMobile.getText().toString().trim();                String name = editTextName.getText().toString().trim();                if (mobile.isEmpty() || mobile.length() != 10) {                    editTextMobile.setError("Enter a valid numbere");                    editTextMobile.requestFocus();                    return;                }                if (name.isEmpty() || name.length() < 4) {                    editTextName.setError("Enter a valid name");                    editTextName.requestFocus();                    return;                }                hideSoftKeyboard(v);                SharedPreferences.Editor editor = getSharedPreferences(SHARED_KEY, MODE_PRIVATE).edit();                editor.putString(VerifyPhoneActivity.NAME, name);                editor.putInt("FirstTime",1);                editor.apply();                Intent intent = new Intent(MainActivity.this, VerifyPhoneActivity.class);                intent.putExtra("mobile",mobile);                startActivity(intent);            }        });    }}/*    public void EnableRuntimePermission() {        if (ActivityCompat.shouldShowRequestPermissionRationale(                MainActivity.this,                Manifest.permission.READ_CONTACTS)) {            Toast.makeText(MainActivity.this, "CONTACTS permission allows us to Access CONTACTS app", Toast.LENGTH_LONG).show();        } else {            ActivityCompat.requestPermissions(MainActivity.this, new String[]{                    Manifest.permission.READ_CONTACTS}, RequestPermissionCode);        }    }    @Override    public void onRequestPermissionsResult(int RC, String per[], int[] PResult) {        switch (RC) {            case RequestPermissionCode:                if (PResult.length > 0 && PResult[0] == PackageManager.PERMISSION_GRANTED) {                    Toast.makeText(MainActivity.this, "Permission Granted, Now your application can access CONTACTS.", Toast.LENGTH_LONG).show();                } else {                    Toast.makeText(MainActivity.this, "Permission Canceled, Now your application cannot access CONTACTS.", Toast.LENGTH_LONG).show();                }                break;        }    }*/